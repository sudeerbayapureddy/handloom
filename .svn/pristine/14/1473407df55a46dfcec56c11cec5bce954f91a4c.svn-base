/**
 * 
 */
package com.karvy.handloom.signup.controller;

import java.math.BigInteger;
import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.ResponseEntity.BodyBuilder;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.JsonObject;
import com.karvy.handloom.common.bean.RegistrationBean;
import com.karvy.handloom.common.util.GenerateOTPRandomUtil;
import com.karvy.handloom.common.util.MailAndMessangeSendingUtil;
import com.karvy.handloom.constants.Constants_URLPath;
import com.karvy.handloom.signup.service.SignUPService;
import com.karvy.handloom.tiles.constants.Constant_Tiles_View;

/**
 * @author sateesh.jangam
 *
 */
@Controller
public class SignUPController {
   
	private static final Logger logger = LoggerFactory.getLogger(SignUPController.class);

	
	@Autowired
	SignUPService signUPService;
	
	@Autowired
	private MailAndMessangeSendingUtil mailAndMessangeSendingUtil;
	
	
	
	@RequestMapping(value="/saveRegistrationForm",method=RequestMethod.POST)
@ResponseBody RegistrationBean saveRegistrationForm(HttpServletRequest request,@RequestBody RegistrationBean registrationBean) throws RemoteException{
		
		logger.info(registrationBean.getName());
		registrationBean.setRollId(String.valueOf(6));
		String response  = null;
		RegistrationBean registrationBeanResponse=new RegistrationBean();
		 
		
		
		logger.info("SignUPController saveRegistrationForm {}",registrationBean.getPassword());
		logger.info("SignUPController saveRegistrationForm {}",registrationBean.getAadharNumber());
			
		Integer saveRegistrationForm=null;
		saveRegistrationForm = signUPService.saveRegistrationForm(registrationBean,request);
		if(saveRegistrationForm!=null && saveRegistrationForm != 0 ){
			registrationBeanResponse.setMobile(registrationBean.getMobile());
			registrationBeanResponse.setOtp("success");
			 						
		}else{
			registrationBeanResponse.setMobile(registrationBean.getMobile());
			registrationBeanResponse.setOtp("fail");
		}
				
		return registrationBeanResponse;
	}
	
	@RequestMapping(value="/checkOTP",method=RequestMethod.POST)
	@ResponseBody String checkOTP(HttpServletRequest request,@RequestBody RegistrationBean registrationBean){
		
		logger.info("mobile number {} ",registrationBean.getMobile());
		logger.info("otp {} ",registrationBean.getOtp());
			return signUPService.checkOTP(registrationBean.getMobile(), registrationBean.getOtp());
		}
	
	@RequestMapping(value="/resendOTP",method=RequestMethod.POST)
	@ResponseBody String resendOTP(HttpServletRequest request,@RequestBody RegistrationBean registrationBean){
				logger.info("resendOTP {} ");
				String result="fail";
				//MailAndMessangeSendingUtil mailAndMessangeSendingUtil=new MailAndMessangeSendingUtil();
				BigInteger generateOtpNumber = signUPService.generateOtpNumber(135981, 6);
				Integer saveresentOTP = signUPService.saveresentOTP(registrationBean.getMobile(), generateOtpNumber.toString());
				if(saveresentOTP>0){
					Boolean messageSender;
					try {
						messageSender = mailAndMessangeSendingUtil.MessageSender(" ", generateOtpNumber.toString(), "  ", registrationBean.getMobile());
						if(messageSender.equals(true)){
							result="success";
						}else{
							result="fail";
						}
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				
							
				}
			return result;
		}
		
	
	
}
